name: Release

on:
  workflow_dispatch:

env:
  FLUTTER_VERSION: "3.10.4"
  APK_BUILD_DIR: "/tmp/build"
  CACHE_KEY: "flutter-:os:-:channel:-:version:-:arch:-:hash:"

jobs:
  build:
    runs-on: ubuntu-20.04
    outputs:
      version: ${{ steps.get_version.outputs.version }}

    steps:
      - uses: actions/checkout@v3

      - name: Get version from pubspec.yaml
        id: get_version
        run: |
          VERSION=$(sed -n 's/^version: \([0-9]*\.[0-9]*\.[0-9]*\).*/\1/p' pubspec.yaml)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Install Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true
          cache-key: ${{ env.CACHE_KEY }}
          cache-path: "${{ runner.tool_cache }}/flutter/:channel:-:version:-:arch:"

      - name: Dependencies
        run: flutter pub get



      - name: Build generated files
        run: dart run build_runner build -d lib

      - name: Upload updated lib files with generated code
        uses: actions/upload-artifact@v3
        with:
          name: lib-files
          path: ./lib/*

  build_ipa:
    needs: build
    runs-on: macos-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Download generated files
        uses: actions/download-artifact@v3
        with:
          name: lib-files
          path: lib

      - name: Install Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true
          cache-key: ${{ env.CACHE_KEY }}
          cache-path: "${{ runner.tool_cache }}/flutter/:channel:-:version:-:arch:"

      - name: Install dependencies
        run: flutter pub get



      - name: Build iOS
        run: |
          flutter build ios --no-codesign
          cd build/ios/iphoneos
          mkdir Payload
          cd Payload
          ln -s ../Runner.app
          cd ..
          zip -r app.ipa Payload

      - name: Upload IPA
        uses: actions/upload-artifact@v2
        with:
          name: ipa-result
          path: build/ios/iphoneos/app.ipa

  build_apk:
    needs: build
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Download generated files
        uses: actions/download-artifact@v3
        with:
          name: lib-files
          path: lib

      - name: Copy files to env.APK_BUILD_DIR
        run: |
          mkdir -p $APK_BUILD_DIR
          cp -r . $APK_BUILD_DIR

      - name: Decode key.properties file
        working-directory: ${{ env.APK_BUILD_DIR }}
        env:
          ENCODED_STRING: ${{ secrets.ANDROID_KEY_PROPERTIES }}
        run: echo $ENCODED_STRING | base64 -di > android/key.properties

      - name: Decode android-keystore.jks file
        working-directory: ${{ env.APK_BUILD_DIR }}
        env:
          ENCODED_STRING: ${{ secrets.ANDROID_KEY_STORE }}
        run: mkdir secrets && echo $ENCODED_STRING | base64 -di > secrets/android-keystore.jks

      - name: Set up JDK 18
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '18.x'

      - name: Install Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true
          cache-key: ${{ env.CACHE_KEY }}
          cache-path: "${{ runner.tool_cache }}/flutter/:channel:-:version:-:arch:"

      - name: Dependencies
        working-directory: ${{ env.APK_BUILD_DIR }}
        run: flutter pub get


      - name: Cache Gradle dependencies (Android)
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Build APK
        working-directory: ${{ env.APK_BUILD_DIR }}
        run: |
          flutter build apk --split-per-abi

      - name: Upload APK
        uses: actions/upload-artifact@v3
        with:
          name: apk-result
          path: ${{ env.APK_BUILD_DIR }}/build/app/outputs/flutter-apk/*.apk

  build_tar:
    needs: build
    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v3

      - name: Download generated files
        uses: actions/download-artifact@v3
        with:
          name: lib-files
          path: lib

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y clang cmake libgtk-3-dev ninja-build libayatana-appindicator3-dev

      - uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: "stable"
          cache: true
          cache-key: ${{ env.CACHE_KEY }}
          cache-path: "${{ runner.tool_cache }}/flutter/:channel:-:version:-:arch:"

      - name: Dependencies
        run: flutter pub get


      - name: Compile linux
        run: flutter build linux

      - name: Create tar.gz archive
        run: |
          cd build/linux/x64/release/bundle
          tar -czvf ../../../../../result.tar.gz *

      - name: Upload tar.gz archive
        uses: actions/upload-artifact@v3
        with:
          name: tar-gz-result
          path: ./*.tar.gz

  build_windows_zip:
    needs: build
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v3

      - name: Download generated files
        uses: actions/download-artifact@v3
        with:
          name: lib-files
          path: lib

      - uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: "stable"
          cache: true
          cache-key: ${{ env.CACHE_KEY }}
          cache-path: "${{ runner.tool_cache }}/flutter/:channel:-:version:-:arch:"

      - name: Dependencies
        run: flutter pub get

      - name: Compile for Windows
        run: flutter build windows

      - name: Zip compiled files
        run: Compress-Archive -Path build/windows/runner/Release/* -DestinationPath PivotChat.zip

      - name: Upload zip
        uses: actions/upload-artifact@v3
        with:
          name: windows-zip-result
          path: PivotChat.zip

  release:
    needs: [ build, build_apk, build_tar, build_windows_zip, build_ipa ]
    runs-on: ubuntu-20.04
    env:
      VERSION: ${{ needs.build.outputs.version }}

    steps:
      - uses: actions/checkout@v3

      # IPA
      - name: Download ipa
        uses: actions/download-artifact@v3
        with:
          name: ipa-result
          path: ipa-result

      - name: Rename ipa
        run: mv ipa-result/*.ipa ipa-result/PivotChat-${{ env.VERSION }}.ipa

      # APK
      - name: Download apk file
        uses: actions/download-artifact@v3
        with:
          name: apk-result
          path: apk-result

      # TAR.GZ
      - name: Download tar.gz file
        uses: actions/download-artifact@v3
        with:
          name: tar-gz-result
          path: tar-gz-result

      - name: Rename tar.gz
        run: mv tar-gz-result/* tar-gz-result/PivotChat-${{ env.VERSION }}-linux-x86-64.tar.gz

      # WINDOWS ZIP
      - name: Download windows zip file
        uses: actions/download-artifact@v3
        with:
          name: windows-zip-result
          path: windows-zip-result
      - name: Rename windows
        run: mv windows-zip-result/*.zip windows-zip-result/PivotChat-${{ env.VERSION }}-windows-x86-64.zip

      - name: Push to Release
        uses: ncipollo/release-action@v1
        with:
          artifacts: "windows-zip-result/*.zip, tar-gz-result/*.tar.gz, apk-result/*.apk, ipa-result/*.ipa"
          token: ${{ secrets.WORKFLOW_TOKEN }}
          tag: v${{ env.VERSION }}
          name: v${{ env.VERSION }}